using Cofoundry.Core.Caching;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Mvc.Testing;
using Microsoft.Extensions.Hosting;

namespace Cofoundry.Web.Tests.Integration;

/// <summary>
/// Implementation of <see cref="WebApplicationFactory"/> designed to run in
/// the Cofoundry.Web.Tests.Integration project.
/// </summary>
public class TestWebApplicationFactory : TestWebApplicationFactory<Startup>
{
}

/// <summary>
/// Factory for bootstrapping an application in memory for functional end to end
/// tests.
/// </summary>
/// <typeparam name="TEntryPoint">
/// A type in the entry point assembly of the application. Typically the Startup
/// or Program classes can be used.
/// </typeparam>
public class TestWebApplicationFactory<TEntryPoint>
    : WebApplicationFactory<TEntryPoint>
    , IAsyncLifetime
    where TEntryPoint : class
{
    private SeededEntities _seededEntities;

    protected override IHostBuilder CreateHostBuilder()
    {
        var builder = Host.CreateDefaultBuilder();

        return builder;
    }

    protected override void ConfigureWebHost(IWebHostBuilder builder)
    {
        // SeededEntities is added to the DI chain as it's used
        // by WebApplicationFactoryExtensions.CreateApp() 
        if (_seededEntities == null)
        {
            throw new InvalidOperationException("The factory must be initialized before configuring a web host.");
        }

        // https://github.com/dotnet/aspnetcore/issues/17707#issuecomment-609061917
        builder.UseContentRoot(Directory.GetCurrentDirectory());
        builder.UseStartup<TEntryPoint>();
        builder.ConfigureServices(services =>
        {
            services.AddSingleton(_seededEntities);
        });
        base.ConfigureWebHost(builder);
    }

    protected override void ConfigureClient(HttpClient client)
    {
        base.ConfigureClient(client);

        // Ensure that any shared cache has been cleared before we begin testing
        // as new data may have been generated by services in a separate service
        // collection
        var cache = Services.GetRequiredService<IObjectCacheFactory>();
        cache.Clear();
    }

    /// <summary>
    /// Called by xUnit after the class has been created, this bootstraps
    /// the database at the start of the test session.
    /// </summary>
    /// <returns></returns>
    public virtual async Task InitializeAsync()
    {
        using var serviceProvider = DbDependentTestApplicationServiceProviderFactory.CreateTestHostProvider();
        var dbInitializer = new TestDatabaseInitializer(serviceProvider);

        await dbInitializer.InitializeCofoundry();
        await dbInitializer.DeleteTestData();
        _seededEntities = await dbInitializer.SeedGlobalEntities();
    }

    public new Task DisposeAsync()
    {
        base.Dispose();
        return Task.CompletedTask;
    }
}
